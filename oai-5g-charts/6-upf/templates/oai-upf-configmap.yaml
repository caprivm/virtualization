apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-configmap
data:
  {{- range $key, $val := .Values.upfConfig }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
  upfConfiguration: |
      SPGW-U =
      {
          FQDN              = "{{ .Values.upfConfig.upfName }}-svc";        # only needed for 4g
          INSTANCE          = {{ .Values.upfConfig.instance }};         # 0 is the default
          PID_DIRECTORY     = "{{ .Values.upfConfig.pidDirectory }}";   # /var/run is the default
          INTERFACES:
          {
              S1U_S12_S4_UP:
              {
                  # S-GW binded interface for S1-U communication (GTPV1-U) can be ethernet interface, virtual ethernet interface, we don't advise wireless interfaces
                  INTERFACE_NAME         = "{{ .Values.upfParameters.interfaceNameForN3 }}";  # STRING, interface name, YOUR NETWORK CONFIG HERE
                  IPV4_ADDRESS           = "read";                                    # STRING, CIDR or "read to let app read interface configured IP address
                  PORT                   = 2152;                                     # Default is 2152
                  SCHED_PARAMS :
                  {
                      # CPU_ID     = 2;
                      SCHED_POLICY = "SCHED_FIFO"; # Values in { SCHED_OTHER, SCHED_IDLE, SCHED_BATCH, SCHED_FIFO, SCHED_RR }
                      SCHED_PRIORITY = {{ .Values.upfParameters.threadsN3Priority }};
                      POOL_SIZE = {{ .Values.upfParameters.threadsN3UL }};
                  };
              };
              SX:
              {
                  # S/P-GW binded interface for SX communication
                  INTERFACE_NAME         = "{{ .Values.upfParameters.interfaceNameForN4 }}";   # STRING, interface name
                  IPV4_ADDRESS           = "read";                                              # STRING, CIDR or "read" to let app read interface configured IP address
                  PORT                   = 8805;                                                # Default is 8805
                  SCHED_PARAMS :
                  {
                      # CPU_ID       = 1;
                      SCHED_POLICY = "SCHED_FIFO"; # Values in { SCHED_OTHER, SCHED_IDLE, SCHED_BATCH, SCHED_FIFO, SCHED_RR }
                      SCHED_PRIORITY = {{ .Values.upfParameters.threadsN4Priority }};
                      POOL_SIZE = {{ .Values.upfParameters.threadsN4UL }};
                  };
              };
              SGI :
              {
                 # No config to set, the software will set the SGi interface to the interface used for the default route.
                  INTERFACE_NAME         = "{{ .Values.upfParameters.interfaceNameForN6 }}"; # STRING, interface name or "default_gateway"
                  IPV4_ADDRESS           = "read";                         # STRING, CIDR or "read" to let app read interface configured IP address
                  SCHED_PARAMS :
                  {
                      # CPU_ID       = 3;
                      SCHED_POLICY = "SCHED_FIFO"; # Values in { SCHED_OTHER, SCHED_IDLE, SCHED_BATCH, SCHED_FIFO, SCHED_RR }
                      SCHED_PRIORITY = {{ .Values.upfParameters.threadsN6Priority }};
                      POOL_SIZE = {{ .Values.upfParameters.threadsN6UL }};
                  };
              };
          };

          SNAT = "{{ .Values.upfParameters.ueNatOption }}"; # SNAT Values in {yes, no}
          PDN_NETWORK_LIST  = (
              {NETWORK_IPV4 = "{{ .Values.upfParameters.ueIpRange }}";}, # 1 ITEM SUPPORTED ONLY
              {NETWORK_IPV4 = "{{ .Values.upfParameters.ueIpRangeNatRules }}";}  # For subequent items SNAT rules have to be created manually
          );

          # SMF List
          SPGW-C_LIST = (
              {IPV4_ADDRESS = "{{ .Values.upfConnections.smf.ip }}" ;}
          );

          NON_STANDART_FEATURES :
          {
              BYPASS_UL_PFCP_RULES = "{{ .Values.upfParameters.byPassUlPfcpRules }}"; # 'no' for standart features, yes for enhancing UL throughput
          };

          SUPPORT_5G_FEATURES:
          {
             # STRING, {"yes", "no"},
             ENABLE_5G_FEATURES = "yes" # Set to 'yes' to support 5G Features
             REGISTER_NRF = "{{ .Values.upfConnections.nrf.registration }}";  # Set to 'yes' if UPF resgisters to an NRF
             USE_FQDN_NRF = "{{ .Values.upfConnections.useFqdnDNS }}"; # Set to 'yes' if UPF relies on a DNS/FQDN service to resolve NRF's FQDN
             UPF_FQDN_5G  = "{{ .Values.upfConfig.upfName }}-svc";  # Set FQDN of UPF

             NRF :
             {
                IPV4_ADDRESS = "{{ .Values.upfConnections.nrf.ip }}";  # YOUR NRF CONFIG HERE
                PORT         = {{ .Values.upfConnections.nrf.port }};            # YOUR NRF CONFIG HERE (default: 80)
                HTTP_VERSION = {{ .Values.upfConnections.nrf.httpVersion }};   #Set HTTP version for NRF (1 or 2)Default 1
                API_VERSION  = "{{ .Values.upfConnections.nrf.apiVersion }}";   # YOUR NRF API VERSION HERE
                FQDN = "{{ .Values.upfConnections.nrf.fqdn }}";
             };

             # Additional info to be sent to NRF for supporting Network Slicing
             UPF_INFO = (
                { NSSAI_SST = {{ .Values.upfConnections.upf.nssaiSst }}; NSSAI_SD = "{{ .Values.upfConnections.upf.nssaiSd }}"; DNN_LIST = ({DNN = "{{ .Values.upfParameters.dnn }}";}); },
                { NSSAI_SST = {{ .Values.upfConnections.upf.nssaiSst }}; NSSAI_SD = "{{ .Values.upfConnections.upf.nssaiSd }}"; DNN_LIST = ({DNN = "{{ .Values.upfParameters.dnn }}";}); }
             );
          }
      };