apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-configmap
data:
  {{- range $key, $val := .Values.ausfConfig }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
  amfConfiguration: |
    AMF =
    {
      INSTANCE_ID = {{ .Values.amfConfig.instance }} ;            # 0 is the default
      PID_DIRECTORY = "{{ .Values.amfConfig.pidDirectory }}";     # /var/run is the default

      AMF_NAME = "{{ .Values.amfConfig.amfName }}";
      
      RELATIVE_CAPACITY = 30;
      # Display statistics about whole system (in seconds)
      STATISTICS_TIMER_INTERVAL = 20; # YOUR CONFIG HERE
      CORE_CONFIGURATION:
      {
        EMERGENCY_SUPPORT = "false";
      };
      GUAMI:
      {
        MCC = "{{ .Values.amfParameters.mcc }}"; MNC = "{{ .Values.amfParameters.mnc }}"; RegionID = "{{ .Values.amfParameters.regionId }}"; AMFSetID = "{{ .Values.amfParameters.amfSetId }}"; AMFPointer = "{{ .Values.amfParameters.amfPointer }}"
      }

      SERVED_GUAMI_LIST = (
        {MCC = "{{ .Values.amfParameters.mcc }}"; MNC = "{{ .Values.amfParameters.mnc }}"; RegionID = "{{ .Values.amfParameters.regionId }}"; AMFSetID = "{{ .Values.amfParameters.amfSetId }}"; AMFPointer = "{{ .Values.amfParameters.amfPointer }}"}
      );

      PLMN_SUPPORT_LIST = (
      {
        MCC = "{{ .Values.amfParameters.mcc }}"; MNC = "{{ .Values.amfParameters.mnc }}"; TAC = {{ .Values.amfParameters.tac }};
        SLICE_SUPPORT_LIST = (
          {SST = {{ .Values.amfParameters.sst0 }}; SD = "{{ .Values.amfParameters.sd0 }}"}
         )
      }
      );
      
      INTERFACES:
      {
        # AMF binded interface for N1/N2 interface (NGAP)
        NGAP_AMF:
        {
          INTERFACE_NAME = "{{ .Values.amfParameters.interfaceNameforNGAP }}";
          IPV4_ADDRESS   = "read";
          PORT           = 38412;
          PPID           = 60;
        };

        # AMF binded interface for SBI (N11 (SMF)/N12 (AUSF), etc.)
        SBI:
        {
          INTERFACE_NAME = "{{ .Values.amfParameters.interfaceNameforSBI }}";
          IPV4_ADDRESS   = "read";
          PORT           = {{ .Values.amfParameters.sbiPortHttp1 }};
          API_VERSION    = "v1";
          HTTP2_PORT     = {{ .Values.amfParameters.sbiPortHttp2 }};

          SMF_INSTANCES_POOL = (
            {SMF_INSTANCE_ID = 1; IPV4_ADDRESS = "{{ .Values.amfConnections.smf.ip }}"; PORT = {{ .Values.amfConnections.smf.porthttp1 }}; HTTP2_PORT = {{ .Values.amfConnections.smf.porthttp2 }}, VERSION = "v1"; FQDN = "{{ .Values.amfConnections.smf.fqdn }}", SELECTED = "true"} # YOUR SMF CONFIG HERE
          );
        };

        NRF :
        {
          IPV4_ADDRESS = "{{ .Values.amfConnections.nrf.ip }}";
          PORT         = {{ .Values.amfConnections.nrf.port }};   # Default: 80
          API_VERSION  = "v1";
          FQDN         = "{{ .Values.amfConnections.nrf.fqdn }}"
        };

        AUSF :
        {
          IPV4_ADDRESS = "{{ .Values.amfConnections.ausf.ip }}";
          PORT         = {{ .Values.amfConnections.ausf.port }};  # Default: 80
          API_VERSION  = "v1";
          FQDN         = "{{ .Values.amfConnections.ausf.fqdn }}"
        };

        UDM :
        {
          IPV4_ADDRESS = "{{ .Values.amfConnections.udm.ip }}";
          PORT         = {{ .Values.amfConnections.udm.port }};   # Default: 80
          API_VERSION  = "v2";
          FQDN         = "{{ .Values.amfConnections.udm.fqdn }}"
        };

        NSSF :
        {
          IPV4_ADDRESS = "{{ .Values.amfConnections.nssf.ip }}";
          PORT         = {{ .Values.amfConnections.nssf.port }};  # Default: 80
          API_VERSION  = "v2";
          FQDN         = "{{ .Values.amfConnections.nssf.fqdn }}"
        };
      };

      SUPPORT_FEATURES:
      {
         # STRING, {"yes", "no"},
         NF_REGISTRATION = "{{ .Values.amfConnections.nrfRegistration }}";  # Set to yes if AMF registers to an NRF
         NRF_SELECTION   = "{{ .Values.amfConnections.nrf.selection }}";    # Set to yes to enable NRF discovery and selection
         EXTERNAL_NRF    = "{{ .Values.amfConnections.nrf.external }}";     # Set to yes if AMF works with an external NRF
         SMF_SELECTION   = "{{ .Values.amfConnections.smf.selection }}";    # Set to yes to enable SMF discovery and selection
         EXTERNAL_AUSF   = "{{ .Values.amfConnections.ausf.external }}";    # Set to yes if AMF works with an external AUSF
         EXTERNAL_UDM    = "{{ .Values.amfConnections.udm.external }}";     # Set to yes if AMF works with an external UDM
         EXTERNAL_NSSF   = "{{ .Values.amfConnections.nssf.external }}";    # Set to yes if AMF works with an external NSSF
         USE_FQDN_DNS    = "{{ .Values.amfConnections.useFqdnDNS }}";       # Set to yes if AMF relies on a DNS to resolve NRF/SMF/UDM/AUSF's FQDN
         USE_HTTP2       = "{{ .Values.amfConnections.useHttp2 }}";         # Set to yes to enable HTTP2 for AMF server
      }

      AUTHENTICATION:
      {
        ## MySQL mandatory options
        MYSQL_server = "{{ .Values.amfConnections.mysql.server }}";     # MySQL Server address
        MYSQL_user   = "{{ .Values.amfConnections.mysql.user }}";       # Database server login
        MYSQL_pass   = "{{ .Values.amfConnections.mysql.password }}";   # Database server password
        MYSQL_db     = "{{ .Values.amfConnections.mysql.db }}";         # Your database name
        RANDOM       = "true";
      };

      NAS:
      {
        ORDERED_SUPPORTED_INTEGRITY_ALGORITHM_LIST = {{ .Values.amfParameters.inteAlgoList }} ;
        ORDERED_SUPPORTED_CIPHERING_ALGORITHM_LIST = {{ .Values.amfParameters.ciphAlgoList }} ;
      };
    };

    MODULES =
    {
      NGAP_MESSAGE = (
        {MSG_NAME = "NGSetupRequest"; ProcedureCode = 21; TypeOfMessage = "initialMessage"}
      );
    };
